{"name":"Accord","tagline":"Accord: A sane validation library for Scala","body":"\r\n[![Build Status](https://travis-ci.org/wix/accord.png?branch=master)](https://travis-ci.org/wix/accord) [![Coverage Status](https://coveralls.io/repos/wix/accord/badge.png?branch=master)](https://coveralls.io/r/wix/accord?branch=master) [![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/wix/accord?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\r\n\r\nOverview\r\n========\r\n\r\n![Accord](assets/accord-logo-light.png)\r\n\r\nAccord is a validation library written in and for Scala. Compared to [JSR 303](http://jcp.org/en/jsr/detail?id=303) and [Scalaz validation](https://github.com/scalaz/scalaz/blob/scalaz-seven/core/src/main/scala/scalaz/Validation.scala) it aims to provide the following:\r\n\r\n* __Composable__: Because JSR 303 is annotation based, validation rules cannot be composed (annotations cannot receive other annotations as parameters). This is a real problem with some Scala features, for example `Option`s or collections. Accord's validation rules are trivially composable.\r\n* __Simple__: Accord provides a dead-simple story for validation rule definition by leveraging macros, as well as the validation call site (see example below).\r\n* __Self-contained__: Accord is macro-based but completely self-contained, and consequently only relies on the Scala runtime and reflection libraries.\r\n* __Integrated__: Other than providing its own DSL and matcher library, Accord is designed to easily integrate with other libraries, and provides out-of-the-box integration with [Spring Validation](spring3/README.md), [Specs<sup>2</sup>](specs2/README.md) and [ScalaTest](scalatest/README.md).\r\n\r\nAccord is developed and used at [![Wix.com Logo](wix_logo.png)](http://www.wix.com) and distributed under the [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0), which basically means you can use and modify it freely. Feedback, bug reports and improvements are welcome!\r\n\r\nExample\r\n=======\r\n\r\nImporting the library for use:\r\n\r\n```scala\r\nimport com.wix.accord._\r\n```\r\n\r\nDefining a validator:\r\n\r\n```scala\r\nimport dsl._    // Import the validator DSL\r\n\r\ncase class Person( firstName: String, lastName: String )\r\ncase class Classroom( teacher: Person, students: Seq[ Person ] )\r\n\r\nimplicit val personValidator = validator[ Person ] { p =>\r\n  p.firstName is notEmpty                   // The expression being validated is resolved automatically, see below\r\n  p.lastName as \"last name\" is notEmpty     // You can also explicitly describe the expression being validated\r\n}\r\n\r\nimplicit val classValidator = validator[ Classroom ] { c =>\r\n  c.teacher is valid        // Implicitly relies on personValidator!\r\n  c.students.each is valid\r\n  c.students have size > 0\r\n}\r\n```\r\n\r\n\r\nRunning a validator:\r\n\r\n```\r\nscala> val validPerson = Person( \"Wernher\", \"von Braun\" )\r\nvalidPerson: Person = Person(Wernher,von Braun)\r\n\r\nscala> validate( validPerson )\r\nres0: com.wix.accord.Result = Success\r\n\r\nscala> val invalidPerson = Person( \"\", \"No First Name\" )\r\ninvalidPerson: Person = Person(,No First Name)\r\n\r\nscala> validate( invalidPerson )\r\nres1: com.wix.accord.Result = Failure(List(RuleViolation(,must not be empty,firstName)))\r\n\r\nscala> val explicitDescription = Person( \"No Last Name\", \"\" )\r\nexplicitDescription: Person = Person(No Last Name,)\r\n\r\nscala> validate( explicitDescription )\r\nres2: com.wix.accord.Result = Failure(List(RuleViolation(,must not be empty,last name)))\r\n\r\nscala> val invalidClassroom = Classroom( Person( \"Alfred\", \"Aho\" ), Seq.empty )\r\ninvalidClassroom: Classroom = Classroom(Person(Alfred,Aho),List())\r\n\r\nscala> validate( invalidClassroom )\r\nres3: com.wix.accord.Result = Failure(List(RuleViolation(List(),has size 0, expected more than 0,students)))\r\n```\r\n\r\nGetting Started\r\n===============\r\n\r\nAccord version 0.4.2 is available on Maven Central Repository. Scala versions 2.10.3+ and 2.11.x are supported. The next milestone is 0.5-SNAPSHOT and is available from the Sonatype snapshots repository.\r\n\r\nSBT\r\n---\r\n\r\nSimply add the `accord-core` module to your build settings:\r\n\r\n```scala\r\nlibraryDependencies += \"com.wix\" %% \"accord-core\" % \"0.4.2\"\r\n```\r\n\r\nIf you want to evaluate the upcoming snapshot release, add the Sonatype snapshot repository to your resolvers; typically this means adding the following to your `build.sbt` file:\r\n\r\n```scala\r\nresolvers += \"Sonatype OSS Snapshots\" at \"https://oss.sonatype.org/content/repositories/snapshots\"\r\n\r\nlibraryDependencies += \"com.wix\" %% \"accord-core\" % \"0.5-SNAPSHOT\"\r\n```\r\n\r\nMaven\r\n-----\r\n\r\nAccord is published to the Maven Central Repository, so you simply have to add the appropriate dependency to your POM:\r\n\r\n```xml\r\n<dependencies>\r\n  <dependency>\r\n    <groupId>com.wix</groupId>\r\n    <artifactId>accord-core_${scala.tools.version}</artifactId>\r\n    <version>0.4.2</version>\r\n  </dependency>\r\n</dependencies>\r\n```\r\n\r\nIf you want to evaluate the upcoming snapshot release, add the Sonatype snapshot repository and a dependency on Accord to your POM:\r\n\r\n```xml\r\n<repositories>\r\n  <repository>\r\n    <id>sonatype-snapshots</id>\r\n    <name>Sonatype snapshot repository</name>\r\n    <url>https://oss.sonatype.org/content/repositories/snapshots</url>\r\n    <releases><enabled>false</enabled></releases>\r\n    <snapshots><enabled>true</enabled></snapshots>\r\n  </repository>\r\n</repositories>\r\n\r\n<dependencies>\r\n  <dependency>\r\n    <groupId>com.wix</groupId>\r\n    <artifactId>accord-core_${scala.tools.version}</artifactId>\r\n    <version>0.5-SNAPSHOT</version>\r\n  </dependency>\r\n</dependencies>\r\n```\r\n\r\nRoadmap\r\n=======\r\n\r\nAccord is still fairly rudimentary, and there's plenty of improvements to be made:\r\n\r\n* Major issues and improvements planned or under consideration for the [0.5 milestone](https://github.com/wix/accord/issues?milestone=5&state=open) release:\r\n    * [#6](https://github.com/wix/accord/issues/6) Support inline expressions in validators\r\n    * [#19](https://github.com/wix/accord/issues/19) Scala.js support\r\n    * [#21](https://github.com/wix/accord/issues/21) i18n support\r\n    * Rethink binary expression API so that arbitrary types can be used\r\n* Future plans:\r\n    * Elide DSL implicit invocations from resulting tree for better performance and smaller code\r\n    * Add syntax for custom violation message overrides (e.g. `p.firstName is notEmpty as \"no first name!\"`)\r\n    * Support custom violation types (e.g. `p.firstName is notEmpty as MyServerError( code = -3 )`)\r\n    * Add a validation result rendering framework\r\n    * Implement accord-hamcrest integration in a separate artifact\r\n    * Add adapter for SpecsÂ² matcher module\r\n\r\nIdeas and feature requests welcome!\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}